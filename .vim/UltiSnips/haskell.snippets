snippet fun "Type signature and function definition (fun)"
${1:name} :: ${2:type} -> ${3:type}
$1 ${4:pattern} = ${5:expr}
endsnippet

snippet pragma "Pragma (pragma)"
{-# ${1} ${2} #-}
endsnippet

snippet pragmal "Language Pragma (pragmal)"
{-# LANGUAGE ${1} #-}
endsnippet

snippet pragmar "Rules Pragma (pragmar)"
{-# RULES
 "${1:name}" ${2} #-}
endsnippet

snippet pragmath "Template Haskell LANGUAGE pragma (pragmath)"
{-# LANGUAGE TemplateHaskell #-}
endsnippet

snippet im "import unqualified (im)"
import           ${1}${2: (${3})}
endsnippet

snippet imq "import qualified (imq)"
import qualified ${1} as ${2}${3: (${4})}
endsnippet

snippet impq "import partially qualified (impq)"
import           ${1} (${2})
import qualified $1 as ${5}
endsnippet


snippet banner "comment banner (banner)"
-------------------------------------------------------------------------------
-- ${1}
-------------------------------------------------------------------------------
endsnippet

snippet datarec "Record type declaration (datarec)"
data ${1} = ${2:$1} { ${3} :: ${4}
         ${1/./  /g}, ${5} :: ${6}
         ${1/./  /g}}
endsnippet

snippet datarecl "Record type declaration w/ Lens (dararecl)"
data ${1} = ${2:$1} { ${3} :: ${4}
         ${1/./  /g}, ${5} :: ${6}
         ${1/./  /g}}

makeLens ''$1
endsnippet
